apiVersion: build.openshift.io/v1
kind: BuildConfig
status: 
  lastVersion: 0
metadata:
  name: {{ template "ocp-pipeline.fullname" . }}-deploy
  #have to set this
  namespace: {{ .Values.tillerNamespace }}
  labels:
    app: {{ template "ocp-pipeline.name" . }}
    chart: {{ template "ocp-pipeline.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  nodeSelector: {}
  resources:
    requests:
      cpu: 2000m
      memory: 4G
    limits:
      cpu: 4000m
      memory: 8G
  triggers:
    - type: "generic"
      generic:
        secretReference:
          name: "{{ .Release.Name }}-git-webhook-secret"
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        def helmName = "helm-v3.1.0-linux-amd64.tar.gz"
        def chartName = "{{ .Values.chart.name }}"
        def chartRepo = "{{ .Values.chart.repo }}"
        def releaseName  = "{{ .Values.releaseName }}"
        def releaseNamespace = "{{ .Values.releaseNamespace }}"
        
          node("nodejs") {
            stage("deploy (it's already built)") {
              sh """
                curl -L -O https://get.helm.sh/${helmName}
                tar -zxvf ${helmName}
                cd linux-amd64

                curl -L -O https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux32
                chmod ugo+x ./jq-linux32
                npm install -g json2yaml

                export CONF1=`oc get secret {{ .Release.Name }}-config -o json | ./jq-linux32 .data.config`
                export CONF2=`sed -e 's/^"//' -e 's/"\$//' <<<"\$CONF1"`
                export CONF3=`echo \$CONF2 | base64 -d -`
                export CONF=`echo \$CONF3 | json2yaml`

                echo "\$CONF" > ./config.yaml
                oc project ${releaseNamespace}
                ./helm repo add chart ${chartRepo}
                ./helm repo update
                ./helm upgrade ${releaseName} chart/${chartName} -f ./config.yaml --install
              """
          }
        }
