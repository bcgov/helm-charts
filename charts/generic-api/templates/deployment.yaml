{{- if not .Values.useStatefulSet }}
{{- $fullName := include "generic-api.fullname" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "generic-api.fullname" . }}
  labels:
    {{- include "generic-api.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
  selector:
    matchLabels:
      {{- include "generic-api.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ toString .Values.config | sha256sum }}
    {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "generic-api.selectorLabels" . | nindent 8 }}
        {{- range $index, $val := .Values.extraLabels }}
        {{ $index }}: {{ $val }}
        {{- end }}

    spec:
      {{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "generic-api.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      {{- range $name, $val := .Values.persistence }}
        {{- if or .claimName .size }}
        {{- if .claimName }}
        - name: {{ $name }}-vol
          persistentVolumeClaim:
            claimName: {{ .claimName }}
        {{- else }}
        - name: {{ $name }}-vol
          persistentVolumeClaim:
            claimName: {{ template "generic-api.fullname" $ }}-{{ $name }}-pvc
        {{- end }}
        {{- else }}
        - name: {{ $name }}-vol
          emptyDir: {}
        {{- end }}
      {{- end }}
{{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
{{- end }}
        {{- range $secretVolume := .Values.secretVolumes }}
        - name: {{ . }}
          secret:
            secretName: {{ . }}
        {{- end }}
        {{- if .Values.tls.enabled }}
        - name: tls-vol
          secret:
            secretName: {{ template "generic-api.fullname" . }}-tls
        {{- end }}
        {{- if .Values.config }}
        - name: config-vol
          configMap:
            name: {{ template "generic-api.fullname" . }}-config
            defaultMode: 0644
        {{- end }}
      containers:
        {{ if .Values.oauthProxy.enabled }}
        - name: oauth-proxy
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.oauthProxy.image.repository }}:{{ .Values.oauthProxy.image.tag }}"
          imagePullPolicy: {{ .Values.oauthProxy.image.pullPolicy }}
          args:
          - --login-url={{ index .Values.oauthProxy.config "oidc-issuer-url" }}/protocol/openid-connect/auth
          - --redeem-url={{ index .Values.oauthProxy.config "oidc-issuer-url" }}/protocol/openid-connect/token
          - --validate-url={{ index .Values.oauthProxy.config "oidc-issuer-url" }}/protocol/openid-connect/userinfo
          {{- range $index, $val := .Values.oauthProxy.config }}
          - --{{ $index }}={{ $val }}
          {{- end }}
          volumeMounts:
          {{- if .Values.tls.enabled }}
            - name: tls-vol
              mountPath: {{ .Values.tls.mountPath }}
              readOnly: true
          {{- end }}
          ports:
            - name: proxy
              containerPort: 7999
              protocol: TCP
          {{ if not .Values.oauthProxy.localUpstream }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.oauthProxy.resources | nindent 12 }}

        {{- end }}

        {{ if .Values.oauthProxy.localUpstream }}
        - name: {{ default .Chart.Name .Values.nameOverride }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.command }}
          command:
            {{- toYaml . | nindent 12 }}
          {{ end }}
          {{- with .Values.args }}
          args:
            {{- toYaml . | nindent 12 }}
          {{ end }}
          env:
          {{ with .Values.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{ end }}
          {{- range $index, $val := .Values.env }}
            {{- if .secure }}
            - name: {{ $index }}
              valueFrom:
                secretKeyRef:
                  name: {{ $fullName }}-secrets
                  key: {{ $index | kebabcase }}
            {{- else }}
            - name: {{ $index }}
              value: {{ .value | quote }}
            {{- end }}
          {{- end }}
          volumeMounts:
          {{- if .Values.extraVolumeMounts }}
          {{ toYaml .Values.extraVolumeMounts | nindent 12 }}
          {{- end }}
          {{- range .Values.secretVolumes }}
            - name:  {{ . }}
              mountPath: /etc/secrets/{{ . }}
          {{- end }}

          {{- range $name, $val := .Values.persistence }}
            - name: {{ $name }}-vol
              mountPath: {{ .mountPath }}
          {{- end }}
          {{- range .Values.config }}
            - name: config-vol
              mountPath: {{ .mountPath }}
              subPath: {{ .filename }}
              readOnly: true
          {{- end }}
          {{- if .Values.tls.enabled }}
            - name: tls-vol
              mountPath: {{ .Values.tls.mountPath }}
              readOnly: true
          {{- end }}

          ports:
            - name: http
              containerPort: {{ .Values.containerPort }}
              protocol: TCP
          {{- range .Values.extraPorts }}
            - name:  {{ .name }}
              containerPort: {{ .port }}
              protocol: TCP
          {{- end }}
          {{- if .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycle }}
          lifecycle:
            {{- toYaml .Values.lifecycle | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- end }}

      {{- if .Values.extraContainers }}
      {{- range $name, $details := .Values.extraContainers }}
        - name: {{ $name }}
          securityContext:
            {{- toYaml (default $.Values.securityContext $details.securityContext) | nindent 12 }}
          image: "{{ $details.image.repository }}:{{ $details.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $details.image.pullPolicy }}
          env:
          {{- if hasKey $details "extraEnvs" }}
          {{ with $details.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{ end }}
          {{- end }}
          {{- range $index, $val := default $.Values.env $details.env }}
            {{- if .secure }}
            - name: {{ $index }}
              valueFrom:
                secretKeyRef:
                  name: {{ $fullName }}-secrets
                  key: {{ $index | kebabcase }}
            {{- else }}
            - name: {{ $index }}
              value: {{ .value | quote }}
            {{- end }}
          {{- end }}
          {{-  (unset (unset (unset (unset $details "securityContext") "image") "extraEnvs") "env") | toYaml | nindent 10 }}

      {{- end }}
      {{- end }}

      {{- if .Values.initContainers }}
      initContainers:
      {{- range $name, $details := .Values.initContainers }}
        - name: {{ $name }}
          securityContext:
            {{- toYaml (default $.Values.securityContext $details.securityContext) | nindent 12 }}
          image: "{{ $details.image.repository }}:{{ $details.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $details.image.pullPolicy }}
          env:
          {{- if hasKey $details "extraEnvs" }}
          {{ with $details.extraEnvs }}
            {{- toYaml . | nindent 12 }}
          {{ end }}
          {{- end }}
          {{- range $index, $val := default $.Values.env $details.env }}
            {{- if .secure }}
            - name: {{ $index }}
              valueFrom:
                secretKeyRef:
                  name: {{ $fullName }}-secrets
                  key: {{ $index | kebabcase }}
            {{- else }}
            - name: {{ $index }}
              value: {{ .value | quote }}
            {{- end }}
          {{- end }}
          {{-  (unset (unset (unset (unset $details "securityContext") "image") "extraEnvs") "env") | toYaml | nindent 10 }}

      {{- end }}
      {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
