# Default values for backup-storage.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: backup-patroni
  pullPolicy: IfNotPresent
  tag: latest

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

backupConfig: |
  postgres=patroni-postgresql-gw:5432/gw

  0 1 * * * default ./backup.sh -s
  0 4 * * * default ./backup.sh -s -v all

config:
  []
  # - filename: 60-tweaks.cnf
  #   mountPath: /etc/my.cnf.d/60-tweaks.cnf
  #   contents: |
  #     [mysqld]
  #     innodb_page_size=32k

persistence:
  backup:
    size: 5Gi
    mountPath: /backups/
    storageClassName: netapp-block-standard
    storageAccessMode: ReadWriteOnce
  verification:
    size: 2Gi
    mountPath: /var/lib/pgsql/data
    storageClassName: netapp-block-standard
    storageAccessMode: ReadWriteOnce

db:
  secretName: "patroni"
  usernameKey: "username-superuser"
  passwordKey: "password-superuser"
  # allow kube secret auth to be disabled - in case of vault or other secret injection
  enabled: true

env:
  BACKUP_STRATEGY:
    value: "rolling"
    secure: false
  BACKUP_DIR:
    value: "/backups/"
  BACKUP_CONF:
    value: "/conf/backup.conf"
  NUM_BACKUPS:
    value: ""
  DAILY_BACKUPS:
    value: "12"
  WEEKLY_BACKUPS:
    value: "8"
  MONTHLY_BACKUPS:
    value: "2"
  BACKUP_PERIOD:
    value: ""
  MONGODB_AUTHENTICATION_DATABASE:
    value: ""
  MSSQL_SA_PASSWORD:
    value: ""
    secure: true
  TABLE_SCHEMA:
    value: ""
  FTP_URL:
    value: ""
    secure: true
  FTP_USER:
    value: ""
    secure: true
  FTP_PASSWORD:
    value: ""
    secure: true
  WEBHOOK_URL:
    value: ""
    secure: true
  ENVIRONMENT_NAME:
    value: ""
  ENVIRONMENT_FRIENDLY_NAME:
    value: "Yeah backups"
  # use the following syntax to wire-up an existing secret
  # EXISTING_DEPLOYMENT_PASSWORD:
  #   existingSecret:
  #     name: "existing-secret-name"
  #     key: "existing-secret-key"

networkPolicy:
  # If true, a default network policy is created allowing access to matching database services
  enabled: false
  # Specifies which port the backup container will send requests from
  backupServicePort: 5432
  # Labels that must be set on the target databases for the backup service to be able to access them
  selectorLabels:
    backup: "true"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

command:
# override the default command executed by the container (appended to the entrypoint [/tini --]) eg:
# - . /vault/secrets/my-vault-secret && bash /backup.sh

args:
# additional arguments for the command, eg:
# - -1

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
