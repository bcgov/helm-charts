{{- $fullName := include "ocp-tkn-terraform.fullname" . -}}
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "ocp-tkn-terraform.labels" . | nindent 4 }}
spec:
  params:
    - description: Git repository url
      name: git-repo-url
      type: string
    - description: Git deploy/release branch
      name: git-release-branch
      type: string
    - description: Deploy namespace
      name: release-namespace
      type: string
    - description: Deployment environment
      name: deployment-env
      type: string
    - description: Source NPM Package
      name: package-ref
      type: string
    - description: Terraform CLI version
      name: terraform-version
      type: string
    - description: Postgres connection string
      name: terraform-backend-postgresql
      type: string
    - description: Folder containing terraform files
      name: terraform-source-folder
      type: string
    - description: Pipelineruns are only kept up to this number of days
      name: retain-days
      type: string
    - description: The name of current pipelinerun
      name: current-pipelinerun-name
      type: string
    - description: The release author name
      name: git-release-author
      type: string
    - description: The release commit id
      name: git-release-commit-sha
      type: string
  tasks:
    - name: initialize-pipelinerun
      params:
        - name: currentPipelineRunName
          value: $(params.current-pipelinerun-name)
      taskRef:
        kind: Task
        name: {{ $fullName }}-init
    - name: clone-repository
      params:
        - name: url
          value: $(params.git-repo-url)
        - name: subdirectory
          value: deployment
        - name: revision
          value: $(params.git-release-branch)
      runAfter:
        - initialize-pipelinerun
      taskRef:
        kind: Task
        name: {{ $fullName }}-git-clone
      workspaces:
        - name: output
          workspace: shared-data
    - name: install-source-code
      params:
        - name: packageRef
          value: $(params.package-ref)
        - name: terraformSourceFolder
          value: $(params.terraform-source-folder)
        - name: deploymentEnv
          value: $(params.deployment-env)
      runAfter:
        - clone-repository
      taskRef:
        kind: Task
        name: {{ $fullName }}-pull-source-code
      workspaces:
        - name: source
          workspace: shared-data
        - name: output
          workspace: shared-data
    - name: setup-terraform
      params:
        - name: terraformVersion
          value: $(params.terraform-version)
        - name: terraformSourceFolder
          value: $(params.terraform-source-folder)
        - name: packageRef
          value: $(params.package-ref)
        - name: terraformBackendPostgresql
          value: $(params.terraform-backend-postgresql)
        - name: releaseNamespace
          value: $(params.release-namespace)
      runAfter:
        - install-source-code
      taskRef:
        kind: Task
        name: {{ $fullName }}-terraform-apply
      workspaces:
        - name: terraform
          workspace: shared-data
        - name: source
          workspace: shared-data
        - name: output
          workspace: shared-data
  finally:
    # - name: cleanup
    #   params:
    #     - name: retainDays
    #       value: $(params.retain-days)
    #   taskRef:
    #     kind: Task
    #     name: {{ $fullName }}-cleanup
    #   workspaces:
    #     - name: cleanup
    #       workspace: shared-data
    - name: notifications
      params:
        - name: pipelineRunName
          value: $(context.pipelineRun.name)
        - name: releaseBranch
          value: $(params.git-release-branch)
        - name: releaseCommit
          value: $(params.git-release-commit-sha)
        - name: releaseAuthor
          value: $(params.git-release-author)
        - name: deploymentStatus
          value: $(tasks.setup-terraform.status)
      {{ if eq .Values.notifications.type "failed"}}
      when:
        - input: $(tasks.setup-terraform.status)
          operator: in
          values: ["Failed", "None"]
      {{- end }}
      taskRef:
        kind: Task
        name: {{ $fullName }}-teams-notif
  workspaces:
    - name: shared-data
