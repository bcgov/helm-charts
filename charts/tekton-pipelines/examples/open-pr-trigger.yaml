nameOverride: ""
fullnameOverride: ""

tasks:
  - name: tests-helm
    params:
      - name: api_url
        type: string
    workspaces:
    - name: source
    - name: pr
    steps:
      - image: registry.fedoraproject.org/f33/python3:latest
        name: pytest
        env:
        - name: API_URL
          value: $(params.api_url)
        script: |
          #!/usr/bin/env sh
          cd /workspace/pr/
          mkdir -p comments
          cd /workspace/source/geomark-testing
          python -m pip install pytest
          python -m pip install shapely
          python -m pip install fiona
          python -m pip install requests
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          python -m pytest -sv --api_url=$API_URL > /workspace/pr/comments/$NOW
  - name: cli-build-helm
    params:
      - name: git-tag
        type: string
      - name: image-tag
        type: string
      - name: route-url
        type: string
      - name: ns
        type: string
    volumes:
      - name: m2-vol
        persistentVolumeClaim: pip-tkt-m2-pvc
    workspaces:
    - name: source
    steps:
      - image: quay.io/openshift/origin-cli:latest
        name: image-build
        volumeMounts:
          - name: m2-vol
            mountPath: /workspace/m2-content
        env:
        - name: GIT_TAG
          value: $(params.git-tag)
        - name: IMG_TAG
          value: $(params.image-tag)
        - name: ROUTE_URL
          value: $(params.route-url)
        - name: NAME_SPACE
          value: $(params.ns)
        script: |
          #!/usr/bin/env sh
          echo "---Moving .war to staging area---"
          cd /workspace/source/
          rm -rf war || true
          mkdir war
          git_tag=$(echo "$GIT_TAG" | sed "s/.*\///")
          cp "/workspace/m2-content/ca/bc/gov/geomark/geomark-war/${git_tag}/geomark-war-${git_tag}.war" /workspace/source/war/pub#geomark.war
          cd war
          echo "--Commencing the build--"
          oc start-build geomark-sidecar --from-dir=/workspace/source/war --wait
          oc tag geomark-sidecar:latest geomark-sidecar:$IMG_TAG
          oc start-build tomcat --wait
          oc tag tomcat:latest tomcat:$IMG_TAG
          oc -n $NAME_SPACE scale deployment/geomark-tomcat --replicas=0
          oc -n $NAME_SPACE scale deployment/geomark-tomcat --replicas=1
          sh -c 'until $(curl --output /dev/null --silent --head --fail $ROUTE_URL); do printf '.'; sleep 5; done;'
          echo "---Geomark is up in test namespace---"
  - name: maven-helm
    volumes:
    - name: m2-vol
      persistentVolumeClaim: pip-tkt-m2-pvc
    - name: conf-vol
      configMap: maven-settings
    workspaces:
      - name: source
      - name: pr
    steps:
      - name: build
        image: maven:3.8.2-jdk-11-slim
        script: |
          #!/usr/bin/env bash
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          /usr/bin/mvn install -q -s /workspace/.m2/settings.xml > /workspace/pr/comments/$NOW
          if [[ "$?" -eq 0 ]] ; then
            rm /workspace/pr/comments/$NOW;
          fi
          echo "---Maven build complete---"
        env:
        - name: MAVEN_OPTS
          value: "-server -Xms256m -Xmx512m -XX:MetaspaceSize=96m -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -XX:+UseParallelOldGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90"
        volumeMounts:
        - name: conf-vol
          mountPath: /workspace/.m2
        - name: m2-vol
          mountPath: /workspace/.m2/repository
        workingDir: /workspace/source
        resources:
          requests:
            memory: 500Mi
            cpu: 250m
          limits:
            memory: 3Gi
            cpu: "2"


pipelines:
  - name: geomark-pr-helm
    triggerName: geomark-trigger-helm
    bindingName: geomark-binding-helm
    serviceAccountName:
      - pipelineTaskName: clone-repo
        taskServiceAccountName: git-bot
      - pipelineTaskName: maven-build
        taskServiceAccountName: pipeline
      - pipelineTaskName: pull-tests
        taskServiceAccountName: git-bot
      - pipelineTaskName: run-tests
        taskServiceAccountName: pipeline
    pipeline_params:
      - name: git-url
        type: string
        description: git repo url
        incomingValue: $(body.repository.ssh_url)
        resourceTemplate: $(tt.params.git-url)
      - name: pr-url
        description: pull request url
        type: string
        incomingValue: $(body.pull_request.html_url)
        resourceTemplate: $(tt.params.pr-url)
      - name: git-revision
        type: string
        description: pull request head commit id
        default: main
        incomingValue: $(body.pull_request.head.sha)
        resourceTemplate: $(tt.params.git-revision)
      - name: route-url
        type: string
        description: api url subject to testing
        default: https://geomark-tomcat-f8d638-test.apps.silver.devops.gov.bc.ca/pub/geomark/api/geomarks/
      - name: git-auth-token
        description: machine account auth token used for pushing content
        type: string
        default: github-auth-token
      - name: git-tag
        description: default tag that is build in main
        type: string
        default: 6.0.x-SNAPSHOT
      - name: ns
        description: namespace used for test deployment
        type: string
        default: f8d638-test
      - name: image-tag
        description: image deployment trigger tag
        type: string
        default: test
    workspaces:
      - name: shared-workspace
        volumeClaimTemplate: 2Gi
      - name: input
      - name: pr-content
        volumeClaimTemplate: 50Mi
    podTemplate:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
    tasks:
      - name: clone-repo
        workspaces:
          - name: output
            workspace: shared-workspace
        ref:
          kind: ClusterTask
          name: git-clone
        params:
          - name: url
            value: $(params.git-url)
          - name: revision
            value: $(params.git-revision)
      - name: pull-pr-meta
        ref:
          name: pull-request
          kind: ClusterTask
        workspaces:
        - name: pr
          workspace: pr-content
        params:
        - name: url
          value: $(params.pr-url)
        - name: secret-key-ref
          value: github-auth-token
        - name: mode
          value: download
        - name: provider
          value: github
        runAfter:
        - clone-repo
      - name: maven-build
        ref:
          name: maven-helm
        runAfter:
          - pull-pr-meta
        workspaces:
        - name: source
          workspace: shared-workspace
        - name: pr
          workspace: pr-content
      - name: image-build
        ref:
          name: cli-build-helm
        runAfter:
          - maven-build
        workspaces:
        - name: source
          workspace: shared-workspace
        params:
          - name: git-tag
            value: $(params.git-tag)
            # value: $(params.git-revision)
          - name: image-tag
            value: $(params.image-tag)
          - name: route-url
            value: $(params.route-url)
          - name: ns
            value: $(params.ns)
      - name: pull-tests
        ref:
          name: git-cli
          kind: ClusterTask
        runAfter:
          - image-build
        workspaces:
        - name: source
          workspace: shared-workspace
        - name: input
          workspace: input
        params:
        - name: GIT_SCRIPT
          value: |
            git reset --hard && git clean -f && git fetch origin && git checkout -b tools origin/tools
      - name: run-tests
        ref:
          name: tests-helm
        runAfter:
          - pull-tests
        workspaces:
        - name: source
          workspace: shared-workspace
        - name: pr
          workspace: pr-content
        params:
        - name: api_url
          value: $(params.route-url)
    finally:
      - name: notify-test-results
        ref:
          name: pull-request
          kind: ClusterTask
        workspaces:
        - name: pr
          workspace: pr-content
        params:
        - name: url
          value: $(params.pr-url)
        - name: secret-key-ref
          value: $(params.git-auth-token)
        - name: mode
          value: upload
        - name: provider
          value: github
events:
  install: true
  defaultRB: true
  token: token
  listeners:
    - name: geomark-listener-helm
      triggers:
        - name: pr-open-trigger
          trigger: geomark-trigger-helm
          binding: geomark-binding-helm
          interceptors:
            - name: github
              eventTypes:
                - name: pull_request
              secretName: github-secret
            - name: cel
              filter: "body.action in ['opened', 'reopened']"
      ingress:
        enabled: true
        name: geomark-ingress-helm
        annotations:
          kubernetes.io/ingress.class: nginx
        path: /
        hosts:
          - name: el-geomark-listener-helm-f8d638-tools.apps.silver.devops.gov.bc.ca
            service: el-geomark-listener-helm
            port: 8080
        tls: []
